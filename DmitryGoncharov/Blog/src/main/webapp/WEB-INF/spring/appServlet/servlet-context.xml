<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- DispatcherServlet Context: определяет настройки одного сервлета; бины, которые доступны только ему -->
	
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- Разрешаем использование аннотаций Spring MVC (то есть @Controller и.т.д) -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- Всю статику (изображения, css-файлы, javascript) положим в папку webapp/resources
                и замаппим их на урл вида /resources/** -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- Отображение видов на jsp-файлы, лежащие в папке /WEB-INF/views -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="by.epam.blog.web" />
	
	
		<!-- JPA -->

	<beans:bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<beans:property name="location">
			<beans:value>resources/database.properties</beans:value>
		</beans:property>
	</beans:bean>

	<beans:bean id="myDataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName">
			<beans:value>${jdbc.driverClassName}</beans:value>
		</beans:property>
		<beans:property name="url">
			<beans:value>${jdbc.url}</beans:value>
		</beans:property>
		<beans:property name="username">
			<beans:value>${jdbc.username}</beans:value>
		</beans:property>
		<beans:property name="password">
			<beans:value>${jdbc.password}</beans:value>
		</beans:property>

	</beans:bean>
	<beans:bean id="myEmf"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<beans:property name="dataSource" ref="myDataSource" />

		<beans:property name="persistenceUnitName" value="application" />
		<beans:property name="persistenceXmlLocation"
			value="classpath*:META-INF/persistence.xml" />
		<beans:property name="jpaVendorAdapter" ref="hibernateVendor" />

		<beans:property name="loadTimeWeaver">
			<beans:bean
				class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"></beans:bean>
		</beans:property>
	</beans:bean>
	<beans:bean id="hibernateVendor"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></beans:bean>
	<beans:bean id="transactionManager"
		class="org.springframework.orm.jpa.JpaTransactionManager">
		<beans:property name="entityManagerFactory" ref="myEmf"></beans:property>
	</beans:bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	<jpa:repositories base-package="by.epam.blog.repository"/>
</beans:beans>
