// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package voting.web;

import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.Collection;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import nl.captcha.Captcha;

import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import voting.domain.Account;
import voting.domain.Gender;
import voting.domain.SystemRole;

privileged aspect AccountController_Roo_Controller {

    @RequestMapping(method = RequestMethod.POST)
    public String AccountController.create(@Valid Account account, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
    	if (!account.getPassword().equals(account.getConfirmPassword())) {
        	bindingResult.rejectValue("confirmPassword", "error_passwords_mistmatch");
        }
    	if (Account.findAccountByName(account.getName()) != null) {
        	bindingResult.rejectValue("name", "error_account_exists");
        }

        if (Account.findAccountByEmail(account.getEmail()) != null) {
        	bindingResult.rejectValue("email", "error_email_exists");
        }
    	
    	Captcha captcha = (Captcha) httpServletRequest.getSession().getAttribute(Captcha.NAME);
    	 if (!captcha.isCorrect(account.getCaptchaText())) {
    		 bindingResult.rejectValue("captchaText", "error_wrong_captcha");
    	 }

    	if (bindingResult.hasErrors()) {
            uiModel.addAttribute("account", account);
            addDateTimeFormatPatterns(uiModel);
            return "accounts/create";
        }
        uiModel.asMap().clear();
        account.persist();
        return "redirect:/login";
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String AccountController.createForm(Model uiModel, HttpServletRequest httpServletRequest) {
    	httpServletRequest.getSession().setAttribute(Captcha.NAME, null);
        uiModel.addAttribute("account", new Account());
        addDateTimeFormatPatterns(uiModel);
        return "accounts/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String AccountController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("account", Account.findAccount(id));
        uiModel.addAttribute("itemId", id);
        addDateTimeFormatPatterns(uiModel);
        return "accounts/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String AccountController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("accounts", Account.findAccountEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Account.countAccounts() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("accounts", Account.findAllAccounts());
        }
        addDateTimeFormatPatterns(uiModel);
        return "accounts/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String AccountController.update(@Valid Account account, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("account", account);
            addDateTimeFormatPatterns(uiModel);
            return "accounts/update";
        }
        uiModel.asMap().clear();
        account.merge();
        return "redirect:/accounts/" + encodeUrlPathSegment(account.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String AccountController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("account", Account.findAccount(id));
        return "accounts/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String AccountController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Account.findAccount(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/accounts";
    }
    
    @ModelAttribute("accounts")
    public Collection<Account> AccountController.populateAccounts() {
        return Account.findAllAccounts();
    }
    
    @ModelAttribute("systemroles")
    public java.util.Collection<SystemRole> AccountController.populateSystemRoles() {
        return Arrays.asList(SystemRole.class.getEnumConstants());
    }

    @ModelAttribute("genders")
    public java.util.Collection<Gender> AccountController.populateGenders() {
        return Arrays.asList(Gender.class.getEnumConstants());
    }
    
    void AccountController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("account_dateofbirth_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    String AccountController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
