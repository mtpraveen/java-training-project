// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package voting.web;

import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;
import voting.domain.Answer;
import voting.domain.Question;

privileged aspect AnswerController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String AnswerController.create(@RequestParam(value = "question_id", required = true) Long questionId, @Valid Answer answer, Model uiModel) {
        uiModel.asMap().clear();
        answer.setQuestion(Question.findQuestion(questionId));
        answer.persist();
        return "redirect:/questions/" + questionId;
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String AnswerController.createForm(Model uiModel) {
        uiModel.addAttribute("answer", new Answer());
        return "answers/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String AnswerController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("answer", Answer.findAnswer(id));
        uiModel.addAttribute("itemId", id);
        return "answers/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String AnswerController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("answers", Answer.findAnswerEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Answer.countAnswers() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("answers", Answer.findAllAnswers());
        }
        return "answers/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String AnswerController.update(@Valid Answer answer, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("answer", answer);
            return "answers/update";
        }
        uiModel.asMap().clear();
        answer.merge();
        return "redirect:/answers/" + encodeUrlPathSegment(answer.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String AnswerController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("answer", Answer.findAnswer(id));
        return "answers/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String AnswerController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Answer answer = Answer.findAnswer(id);
        Question question = answer.getQuestion();
    	answer.remove();
        uiModel.asMap().clear();
//        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
//        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/questions/" + question.getId();
    }
    
    @ModelAttribute("answers")
    public Collection<Answer> AnswerController.populateAnswers() {
        return Answer.findAllAnswers();
    }
    
    @ModelAttribute("questions")
    public java.util.Collection<Question> AnswerController.populateQuestions() {
        return Question.findAllQuestions();
    }
    
    String AnswerController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
