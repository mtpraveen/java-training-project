// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package voting.domain;

import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import voting.domain.AccountDataOnDemand;
import voting.domain.QuestionDataOnDemand;
import voting.domain.Vote;

privileged aspect VoteDataOnDemand_Roo_DataOnDemand {
    
    declare @type: VoteDataOnDemand: @Component;
    
    private Random VoteDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Vote> VoteDataOnDemand.data;
    
    @Autowired
    private AccountDataOnDemand VoteDataOnDemand.accountDataOnDemand;
    
    @Autowired
    private QuestionDataOnDemand VoteDataOnDemand.questionDataOnDemand;
    
    public Vote VoteDataOnDemand.getNewTransientVote(int index) {
        voting.domain.Vote obj = new voting.domain.Vote();
        setVoteDate(obj, index);
        setAccount(obj, index);
        setQuestion(obj, index);
        return obj;
    }
    
    private void VoteDataOnDemand.setVoteDate(Vote obj, int index) {
        java.util.Date voteDate = new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setVoteDate(voteDate);
    }
    
    private void VoteDataOnDemand.setAccount(Vote obj, int index) {
        voting.domain.Account account = accountDataOnDemand.getRandomAccount();
        obj.setAccount(account);
    }
    
    private void VoteDataOnDemand.setQuestion(Vote obj, int index) {
        voting.domain.Question question = questionDataOnDemand.getRandomQuestion();
        obj.setQuestion(question);
    }
    
    public Vote VoteDataOnDemand.getSpecificVote(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Vote obj = data.get(index);
        return Vote.findVote(obj.getId());
    }
    
    public Vote VoteDataOnDemand.getRandomVote() {
        init();
        Vote obj = data.get(rnd.nextInt(data.size()));
        return Vote.findVote(obj.getId());
    }
    
    public boolean VoteDataOnDemand.modifyVote(Vote obj) {
        return false;
    }
    
    public void VoteDataOnDemand.init() {
        data = voting.domain.Vote.findVoteEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Vote' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<voting.domain.Vote>();
        for (int i = 0; i < 10; i++) {
            voting.domain.Vote obj = getNewTransientVote(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
