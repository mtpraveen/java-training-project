// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package voting.domain;

import java.util.List;
import java.util.Random;
import org.springframework.stereotype.Component;
import voting.domain.Account;

privileged aspect AccountDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AccountDataOnDemand: @Component;
    
    private Random AccountDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Account> AccountDataOnDemand.data;
    
    public Account AccountDataOnDemand.getNewTransientAccount(int index) {
        voting.domain.Account obj = new voting.domain.Account();
        setName(obj, index);
        setPassword(obj, index);
        setEmail(obj, index);
        setSystemRole(obj, index);
        setBanned(obj, index);
        setDateOfBirth(obj, index);
        setGender(obj, index);
        return obj;
    }
    
    private void AccountDataOnDemand.setName(Account obj, int index) {
        java.lang.String name = "name_" + index;
        obj.setName(name);
    }
    
    private void AccountDataOnDemand.setPassword(Account obj, int index) {
        java.lang.String password = "password_" + index;
        if (password.length() > 25) {
            password = password.substring(0, 25);
        }
        obj.setPassword(password);
    }
    
    private void AccountDataOnDemand.setEmail(Account obj, int index) {
        java.lang.String email = "email_" + index;
        obj.setEmail(email);
    }
    
    private void AccountDataOnDemand.setSystemRole(Account obj, int index) {
        voting.domain.SystemRole systemRole = voting.domain.SystemRole.class.getEnumConstants()[0];
        obj.setSystemRole(systemRole);
    }
    
    private void AccountDataOnDemand.setBanned(Account obj, int index) {
        java.lang.Boolean banned = false;
        obj.setBanned(banned);
    }
    
    private void AccountDataOnDemand.setDateOfBirth(Account obj, int index) {
        java.util.Date dateOfBirth = new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfBirth(dateOfBirth);
    }
    
    private void AccountDataOnDemand.setGender(Account obj, int index) {
        voting.domain.Gender gender = voting.domain.Gender.class.getEnumConstants()[0];
        obj.setGender(gender);
    }
    
    public Account AccountDataOnDemand.getSpecificAccount(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Account obj = data.get(index);
        return Account.findAccount(obj.getId());
    }
    
    public Account AccountDataOnDemand.getRandomAccount() {
        init();
        Account obj = data.get(rnd.nextInt(data.size()));
        return Account.findAccount(obj.getId());
    }
    
    public boolean AccountDataOnDemand.modifyAccount(Account obj) {
        return false;
    }
    
    public void AccountDataOnDemand.init() {
        data = voting.domain.Account.findAccountEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Account' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<voting.domain.Account>();
        for (int i = 0; i < 10; i++) {
            voting.domain.Account obj = getNewTransientAccount(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
